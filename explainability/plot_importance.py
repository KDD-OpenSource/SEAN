import numpy as np
import matplotlib.pyplot as plt
import json

import matplotlib.colors as mcolors


#tiny helper function for nicer plot
def add_alpha_to_color(color_name, alpha=0.8):
    rgb = mcolors.to_rgba(color_name)
    return (rgb[0], rgb[1], rgb[2], alpha)



#load importances as generated by generate_importances.py
with open("importances.json") as f:
    data = json.load(f)
    mean,dic = data["mean"],data["features"]

#sort features by their importance
def dic_sort(dic):
    return {key: dic[key] for key in sorted(dic.keys(), key=lambda x: dic[x], reverse=True)}
dic=dic_sort(dic)

#choose 5 features to visualize
count=5
labels=list(dic.keys())
labels=list(labels[:count])[::-1]+["others"]
sizes=list(dic.values())
sizes=list(sizes[:count])[::-1]+[sum(sizes[count:])]
explode=[0.00]+[0.00]*(count)#optional: highligh some features

plt.figure(figsize=(10,6))


#choose some nice colors
colors=["firebrick","goldenrod","olivedrab","lightseagreen","royalblue","darkorchid"]+["gray"]*(count-5)
colors=colors[:5][::-1]+colors[5:]
colors=[add_alpha_to_color(color) for color in colors]

plt.pie(sizes, explode=explode, labels=labels, colors=colors,
autopct='%1.0f%%', shadow=False, startangle=210)

plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.title("Anomaly feature contribution")



plt.show()



